from blockchain.judgement import Judgement
from blockchain.helper.key_utils import load_rsa_from_pem
import os
import pytest

PUBLIC_KEY = load_rsa_from_pem("tests" + os.sep + "testkey_pub.bin")
PRIVATE_KEY = load_rsa_from_pem("tests" + os.sep + "testkey_priv.bin")


@pytest.fixture()
def judgement():
    judge = Judgement("12223", True, PUBLIC_KEY)
    judge.timestamp = 123456
    yield judge


def test_signing(judgement):
    assert judgement.sign(PRIVATE_KEY), "cant sign judgement"
    assert judgement.sign(PRIVATE_KEY) is None, "cant double sign judgement"


def test_string_representation(judgement):
    judgement.sign(PRIVATE_KEY)
    expected_string_representation = \
"""-----------------------
  Judgement
  Judged block: 12223
  Accept block: True
  Public key: b'0\\x82\\x01"0\\r\\x06\\t*\\x86H\\x86\\xf7\\r\\x01\\x01\\x01\\x05\\x00\\x03\\x82\\x01\\x0f\\x000\\x82\\x01\\n\\x02\\x82\\x01\\x01\\x00\\xae%\\x0c\\xf9l\\xedV\\x05J6\\x9a|\\xa4\\xc9\\xba\\x87\\xd8_+\\x0bT\\xd3\\x98\\x10M\\x9c\\xc3\\x97\\xc4\\x8aE9\\xb67\\r\\xe4\\x93PN\\xb7&\\xc8\\x93\\x89\\xa8\\x96J\\xf3\\xd99Z\\xeb|\\xf8?;\\xb2\\xf7Fi\\xaf\\xa4\\x93\\xb8P\\xf1\\x8d9>\\xb7#w\\xeb\\x04\\tX+\\xbb5\\x81\\x92\\xc8]\\xbfS\\x89\\xad/e\\x126\\xa6\\xf8\\x816\\xd1\\xada\\xad\\xe1@\\xb0\\xeb\\x01\\xbb\\x94\\xc6\\xc1\\xce\\x15E\\x1e\\x9b\\x8d\\xec\\x8a\\xa3\\x18k\\xa0+D\\x9c\\x07\\x16\\x03\\xf9\\xe1\\x14\\xe9\\x88\\xc2)\\x07N\\xfa\\xb7\\xd6\\x1d\\xb3m\\x90 4A\\xc2S\\x02\\x1f7\\x83cDR\\xe7\\xfe2\\xc4\\x80\\xb3}\\xe6\\xaf\\xf4\\x9c\\xd4\\x1b\\x9fY\\x10`\\x95\\x1f*^\\xab\\x9cSd\\xc9)\\xeb\\xf6\\xe4\\xcfr\\x17yZ\\xe1`\\xe2a\\x1d9^\\xa5\\xe5\\xd2\\xdb\\x9cUty\\xb6<\\x00J\\xfdTEQ\\xaf\\x8b\\xfb\\x90\\x8e\\x8b\\xacF\\x94\\xc6\\x83\\xa0\\xe8\\xf7V\\x13lck[\\xb3\\x9d\\xb1\\xc1r\\xfe\\x942\\xbe>\\xe60\\xffF\\n\\xdd\\x11\\xfe\\xd2\\xc4Pj\\xae\\x9b\\x02\\x03\\x01\\x00\\x01'
  Timestamp: 123456
  Version: 0.0.1
-----------------------"""
    assert str(judgement) == expected_string_representation,\
        "wrong string representation"


def test_object_representation(judgement):
    judgement.sign(PRIVATE_KEY)
    expected_object_representation = """Judgement(accept_block=True, hash_of_judged_block='12223', sender_pubkey=b'0\\x82\\x01"0\\r\\x06\\t*\\x86H\\x86\\xf7\\r\\x01\\x01\\x01\\x05\\x00\\x03\\x82\\x01\\x0f\\x000\\x82\\x01\\n\\x02\\x82\\x01\\x01\\x00\\xae%\\x0c\\xf9l\\xedV\\x05J6\\x9a|\\xa4\\xc9\\xba\\x87\\xd8_+\\x0bT\\xd3\\x98\\x10M\\x9c\\xc3\\x97\\xc4\\x8aE9\\xb67\\r\\xe4\\x93PN\\xb7&\\xc8\\x93\\x89\\xa8\\x96J\\xf3\\xd99Z\\xeb|\\xf8?;\\xb2\\xf7Fi\\xaf\\xa4\\x93\\xb8P\\xf1\\x8d9>\\xb7#w\\xeb\\x04\\tX+\\xbb5\\x81\\x92\\xc8]\\xbfS\\x89\\xad/e\\x126\\xa6\\xf8\\x816\\xd1\\xada\\xad\\xe1@\\xb0\\xeb\\x01\\xbb\\x94\\xc6\\xc1\\xce\\x15E\\x1e\\x9b\\x8d\\xec\\x8a\\xa3\\x18k\\xa0+D\\x9c\\x07\\x16\\x03\\xf9\\xe1\\x14\\xe9\\x88\\xc2)\\x07N\\xfa\\xb7\\xd6\\x1d\\xb3m\\x90 4A\\xc2S\\x02\\x1f7\\x83cDR\\xe7\\xfe2\\xc4\\x80\\xb3}\\xe6\\xaf\\xf4\\x9c\\xd4\\x1b\\x9fY\\x10`\\x95\\x1f*^\\xab\\x9cSd\\xc9)\\xeb\\xf6\\xe4\\xcfr\\x17yZ\\xe1`\\xe2a\\x1d9^\\xa5\\xe5\\xd2\\xdb\\x9cUty\\xb6<\\x00J\\xfdTEQ\\xaf\\x8b\\xfb\\x90\\x8e\\x8b\\xacF\\x94\\xc6\\x83\\xa0\\xe8\\xf7V\\x13lck[\\xb3\\x9d\\xb1\\xc1r\\xfe\\x942\\xbe>\\xe60\\xffF\\n\\xdd\\x11\\xfe\\xd2\\xc4Pj\\xae\\x9b\\x02\\x03\\x01\\x00\\x01', signature=b'Q\\xee\\x0c\\xd1\\x0f\\xe5{\\x8bl@h\\x91=\\x96\\x9eA\\x9b\\xac\\xa7\\xad\\xda\\x9e\\x96\\xb3\\x01\\xd2\\x1d\\xdcv,\\xd6\\x1b\\xa8\\x9b\\'\\x9b\\xeb\\x0e\\xf2\\xc4j("2\\x8e\\x8di\\x81\\xe6-Bb\\xd0\\x1d\\x03\\xa9\\xb3$v.\\xea}\\xd6\\x03\\xa1r`}z\\xfa*\\xd8\\x87\\x9e\\x1d\\xd2\\xeb\\x95\\xb5$\\xd4Z\\xa6\\x13Gj\\xbaj\\xc1\\xdc\\xa7\\xa2\\xfaS\\xaaNqL\\x12+\\x8e\\xce\\x91\\xb81\\xb7\\xa8E4\\x185\\x87\\x95\\x02\\xb8\\xb27\\xb9+\\x84\\x1d\\'\\xa2\\xc3\\xaa^\\x84\\xbe\\xbf\\xc1\\xa1\\xfdw*!%\\xa8\\xb1\\x95%\\xa7\\xf8\\x04\\x82\\xca\\xf3\\x84\\x02\\xe4\\xbf\\x0fg\\x1eY\\xcb\\xff\\'\\x1b\\xd9xik\\x81MO\\t{\\xdd\\xa8\\xc4\\xf3\\xea\\xcf\\xec\\xe0\\x92\\xads\\x18\\xa4h\\x17}u\\xbd\\xd6\\xb9X\\x00im\\x01BJ\\xd1\\x8bD=f\\x04W\\xa8w\\x83\\xc9\\xe6\\x93\\x83\\xf9N\\x95%\\xbe\\xb9,8\\xa3\\xdf\\xda,~\\x94\\xd3\\x89\\xf9\\xb8G\\x8c\\xf7LaN?\\x98\\xc5\\xce\\xd4\\x9e\\xb5]\\xc6\\xa8\\x97\\x0ft)&\\xba\\x0eZ\\xa1\\x1a\\x08\\x13\\xe1#', timestamp=123456, version='0.0.1')"""
    assert repr(judgement) == expected_object_representation,\
        "wrong object representation"


def test_judgement_validation(judgement):
    assert not judgement.validate(), "did not detect unsigned judgement"
    judgement.sign(PRIVATE_KEY)
    assert judgement.validate(), "correct judgement detected as false"


def test_hashable(judgement):
    assert hash(judgement)


def test_comparable(judgement):
    assert judgement == judgement
